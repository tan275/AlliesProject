{"ast":null,"code":"import { createUserWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from '../firebase/init.js';\nimport { signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nconst provider = new GoogleAuthProvider();\nexport default {\n  data() {\n    return {\n      username: '',\n      email: '',\n      password: ''\n    };\n  },\n  methods: {\n    signUp() {\n      // register new user\n      createUserWithEmailAndPassword(auth, this.email, this.password).then(credential => {\n        // registered and signed in\n        console.log(credential.user);\n      }).catch(error => {\n        console.log(error.message);\n      });\n    },\n    googleSignup() {\n      signInWithPopup(provider).then(result => {\n        // This gives you a Google Access Token. You can use it to access the Google API.\n        const credential = GoogleAuthProvider.credentialFromResult(result);\n        const token = credential.accessToken;\n        // The signed-in user info.\n        const user = result.user;\n        // IdP data available using getAdditionalUserInfo(result)\n        // ...\n      }).catch(error => {\n        // Handle Errors here.\n        const errorCode = error.code;\n        const errorMessage = error.message;\n        // The email of the user's account used.\n        const email = error.customData.email;\n        // The AuthCredential type that was used.\n        const credential = GoogleAuthProvider.credentialFromError(error);\n        // ...\n      });\n    }\n  }\n};","map":{"version":3,"names":["createUserWithEmailAndPassword","auth","signInWithPopup","GoogleAuthProvider","provider","data","username","email","password","methods","signUp","then","credential","console","log","user","catch","error","message","googleSignup","result","credentialFromResult","token","accessToken","errorCode","code","errorMessage","customData","credentialFromError"],"sources":["src/views/Register.vue"],"sourcesContent":["<template>\r\n  <div class=\"form-wrap\">\r\n    <form class=\"register\">\r\n      <p class=\"login-register\">\r\n        Already have an account?\r\n        <router-link class=\"router-link\" :to=\"{ name: 'login' }\">Login</router-link>\r\n      </p>\r\n      <h2>Create Your Allies Account</h2>\r\n      <div class=\"inputs\">\r\n        <div class=\"input\">\r\n          <input type=\"text\" placeholder=\"First Name\" v-model=\"firstName\" />\r\n\r\n        </div>\r\n        <div class=\"input\">\r\n          <input type=\"text\" placeholder=\"Last Name\" v-model=\"lastName\" />\r\n\r\n        </div>\r\n        <div class=\"input\">\r\n          <input type=\"text\" placeholder=\"Username\" v-model=\"username\" />\r\n\r\n        </div>\r\n        <div class=\"input\">\r\n          <input type=\"text\" placeholder=\"Email\" v-model=\"email\" />\r\n\r\n        </div>\r\n        <div class=\"input\">\r\n          <input type=\"password\" placeholder=\"Password\" v-model=\"password\" />\r\n\r\n        </div>\r\n\r\n        <div v-show=\"error\" class=\"error\">{{ this.errorMsg }}</div>\r\n      </div>\r\n\r\n      <button @submit.prevent=\"signUp\">Sign Up</button>\r\n      <button >Sign Up using Google</button>\r\n      <div class=\"angle\"></div>\r\n    </form>\r\n\r\n    <div class=\"background\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { createUserWithEmailAndPassword } from 'firebase/auth'\r\nimport { auth } from '../firebase/init.js'\r\nimport {signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\r\n\r\nconst provider = new GoogleAuthProvider();\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      username: '',\r\n      email: '',\r\n      password: ''\r\n    }\r\n  },\r\n  methods: {\r\n    signUp() {\r\n      // register new user\r\n      createUserWithEmailAndPassword(auth, this.email, this.password)\r\n        .then((credential) => {\r\n          // registered and signed in\r\n          console.log(credential.user)\r\n        })\r\n        .catch((error) => {\r\n          console.log(error.message)\r\n        })\r\n    },\r\n    googleSignup() {\r\n      signInWithPopup( provider)\r\n        .then((result) => {\r\n          // This gives you a Google Access Token. You can use it to access the Google API.\r\n          const credential = GoogleAuthProvider.credentialFromResult(result);\r\n          const token = credential.accessToken;\r\n          // The signed-in user info.\r\n          const user = result.user;\r\n          // IdP data available using getAdditionalUserInfo(result)\r\n          // ...\r\n        }).catch((error) => {\r\n          // Handle Errors here.\r\n          const errorCode = error.code;\r\n          const errorMessage = error.message;\r\n          // The email of the user's account used.\r\n          const email = error.customData.email;\r\n          // The AuthCredential type that was used.\r\n          const credential = GoogleAuthProvider.credentialFromError(error);\r\n          // ...\r\n        });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped >\r\n.register {\r\n  h2 {\r\n    max-width: 350px;\r\n  }\r\n}\r\n\r\n.form-wrap {\r\n  overflow: hidden;\r\n  display: flex;\r\n  height: 100vh;\r\n  justify-content: center;\r\n  align-self: center;\r\n  margin: 0 auto;\r\n  width: 90%;\r\n\r\n  @media (min-width: 900px) {\r\n    width: 100%;\r\n  }\r\n\r\n  .login-register {\r\n    margin-bottom: 32px;\r\n\r\n    .router-link {\r\n      color: #000;\r\n    }\r\n  }\r\n\r\n  form {\r\n    padding: 0 10px;\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex: 1;\r\n\r\n    @media (min-width: 900px) {\r\n      padding: 0 50px;\r\n    }\r\n\r\n    h2 {\r\n      text-align: center;\r\n      font-size: 32px;\r\n      color: #303030;\r\n      margin-bottom: 40px;\r\n\r\n      @media (min-width: 900px) {\r\n        font-size: 40px;\r\n      }\r\n    }\r\n\r\n    .inputs {\r\n      width: 100%;\r\n      max-width: 350px;\r\n\r\n      .input {\r\n        position: relative;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        margin-bottom: 8px;\r\n\r\n        input {\r\n          width: 100%;\r\n          border: none;\r\n          background-color: #f2f7f6;\r\n          padding: 4px 4px 4px 30px;\r\n          height: 50px;\r\n\r\n          &:focus {\r\n            outline: none;\r\n          }\r\n        }\r\n\r\n        .icon {\r\n          width: 12px;\r\n          position: absolute;\r\n          left: 6px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .forgot-password {\r\n      text-decoration: none;\r\n      color: #000;\r\n      cursor: pointer;\r\n      font-size: 14px;\r\n      margin: 16px 0 32px;\r\n      border-bottom: 1px solid transparent;\r\n      transition: 0.5s ease all;\r\n\r\n      &:hover {\r\n        border-color: #303030;\r\n      }\r\n    }\r\n\r\n    .angle {\r\n      display: none;\r\n      position: absolute;\r\n      background-color: #fff;\r\n      transform: rotateZ(3deg);\r\n      width: 60px;\r\n      right: -30px;\r\n      height: 101%;\r\n\r\n      @media (min-width: 900px) {\r\n        display: initial;\r\n      }\r\n    }\r\n  }\r\n\r\n  .background {\r\n    display: none;\r\n    flex: 2;\r\n    background-size: cover;\r\n    background-image: url(\"../assets/gradient.png\");\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    @media (min-width: 900px) {\r\n      display: initial;\r\n    }\r\n  }\r\n}</style>"],"mappings":"AA2CA,SAAAA,8BAAA;AACA,SAAAC,IAAA;AACA,SAAAC,eAAA,EAAAC,kBAAA;AAEA,MAAAC,QAAA,OAAAD,kBAAA;AAEA;EACAE,KAAA;IACA;MACAC,QAAA;MACAC,KAAA;MACAC,QAAA;IACA;EACA;EACAC,OAAA;IACAC,OAAA;MACA;MACAV,8BAAA,CAAAC,IAAA,OAAAM,KAAA,OAAAC,QAAA,EACAG,IAAA,CAAAC,UAAA;QACA;QACAC,OAAA,CAAAC,GAAA,CAAAF,UAAA,CAAAG,IAAA;MACA,GACAC,KAAA,CAAAC,KAAA;QACAJ,OAAA,CAAAC,GAAA,CAAAG,KAAA,CAAAC,OAAA;MACA;IACA;IACAC,aAAA;MACAjB,eAAA,CAAAE,QAAA,EACAO,IAAA,CAAAS,MAAA;QACA;QACA,MAAAR,UAAA,GAAAT,kBAAA,CAAAkB,oBAAA,CAAAD,MAAA;QACA,MAAAE,KAAA,GAAAV,UAAA,CAAAW,WAAA;QACA;QACA,MAAAR,IAAA,GAAAK,MAAA,CAAAL,IAAA;QACA;QACA;MACA,GAAAC,KAAA,CAAAC,KAAA;QACA;QACA,MAAAO,SAAA,GAAAP,KAAA,CAAAQ,IAAA;QACA,MAAAC,YAAA,GAAAT,KAAA,CAAAC,OAAA;QACA;QACA,MAAAX,KAAA,GAAAU,KAAA,CAAAU,UAAA,CAAApB,KAAA;QACA;QACA,MAAAK,UAAA,GAAAT,kBAAA,CAAAyB,mBAAA,CAAAX,KAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}